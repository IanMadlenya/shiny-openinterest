opening$diff <- diff(closing$close, 1)
data <- subset(data, select=-ticker)
data
names(data)
data <- read.table(quotesFile, sep=",")
names(data)
header=T, sep=",")
data.zoo <- read.zoo(quotesFile,format="%Y-%m-%d %H:%M:%S",FUN = as.POSIXct,#
 header=T, sep=",")
names(data.zoo)
data.zoo <- subset(data.zoo, select=-ticker)
data.zoo
data.xts <- as.xts(data.zoo)
data.xts
data.zoo <- subset(data.zoo, select=-c(ticker,open))
data.zoo <- read.zoo(quotesFile,format="%Y-%m-%d %H:%M:%S",FUN = as.POSIXct,#
 header=T, sep=",")#
 data.zoo <- subset(data.zoo, select=-c(ticker,open))
data.zoo
data.xts <- as.xts(data.zoo)
data.xts
data.xts <- read.xts(quotesFile,format="%Y-%m-%d %H:%M:%S",FUN = as.POSIXct,#
 header=T, sep=",")
data <- subset(data, select=-c(ticker,open))
data <- read.table(quotesFile, sep=",")#
 data <- subset(data, select=-c(ticker,open))
data
data <- read.table(quotesFile, sep=",", header=T)
data <- subset(data, select=-c(ticker,open))
data
data.xts <- as.xts(data)
data.zoo <- as.xts(data)
data.zoo <- as.xts(data,format="%Y-%m-%d %H:%M:%S",FUN = as.POSIXct)
data.zoo <- read.zoo(quotesFile,format="%Y-%m-%d %H:%M:%S",FUN = as.POSIXct,#
 header=T, sep=",")
data.zoo
data.zoo <- subset(data.zoo, select=-c(ticker,open))
x <- diff(data.zoo$close,1)
data.zoo
names(data$zoo)
data.zoo$close
lag(data.zoo$close)
x <- data.zoo-lag(data.zoo)
data.zoo
lag(data.zoo)
names(data.zoo)
class(data.zoo$bid)
x <- as.numeric(data.zoo)-lag(as.numeric(data.zoo))
x
x <- as.numeric(data.zoo$close)-lag(as.numeric(data.zoo$close))
x
data.zoo$close
x <- diff(as.numeric(data.zoo$close),1)
x
opening$diff <- diff(as.numeric(opening$close),1)
opening$close
opening <- data.xts['T07:50/T09:35']
opening
opening$close
as.numeric(opening$close)
opening$diff <- diff(as.numeric(opening$close),1)
diff(as.numeric(opening$close),1)
opening$diff <- diff(as.numeric(opening$bid),1)
diff(as.numeric(opening$bid),1)
opening
diff(data$bid,1)
data <- read.table(quotesFile, sep=",", header=T)
data$bidD <- diff(data$bid,1)
help(diff)
bidD <- diff(data$bid,1)
bidD
bidD <- c(0,diff(data$bid,1))
bidD
data$bidD <- c(0,diff(data$bid,1))
data
data.xts <- as.xts(data.zoo)#
closing <- data.xts['T15:50/T16:05']$close
closing
opening <- data.xts['T07:50/T09:35']
opening
data.zoo <- read.zoo(quotesFile,format="%Y-%m-%d %H:%M:%S",FUN = as.POSIXct,#
 header=T, sep=",")
data.xts <- as.xts(data.zoo)
opening <- data.xts['T07:50/T09:35']
opening
data.zoo <- read.zoo(quotesFile,format="%Y-%m-%d %H:%M:%S",FUN = as.POSIXct,#
 header=T, sep=",")
data.xts <- as.xts(data.zoo)
opening <- data.xts['T07:50/T09:35']
opening
data.zoo <- read.zoo(quotesFile,format="%Y-%m-%d %H:%M:%S",FUN = as.POSIXct,#
 header=T, sep=",")
data.xts <- as.xts(data.zoo)
data.xts
opening <- data.xts['T07:50/T09:35']
opening
diff(as.numeric(opening$bid),1)
opening$diff <- diff(as.numeric(opening$bid),1)
opening$diff <- c(0,diff(as.numeric(opening$bid),1))
c(0,diff(as.numeric(opening$bid),1))
opening
mean(opening$diff)
opening <- opening['T09:29/T09:35']
opening
mean(opening$diff)
closing <- data.xts['T15:50/T16:05']
closing
closing <- data.xts['T15:50/T16:05']#
closing$diff <- c(0,diff(as.numeric(closing$bid),1))
c(0,diff(as.numeric(closing$bid),1))
closing
closing <- closing['T16:00/T16:05']
closing
mean(closing$diff)
median(closing$diff)
mean(closing$diff)
mean(opening$diff)
#deal with opening.  painful method.  #
opening <- data.xts['T07:50/T09:35']#
opening$diff <- c(0,diff(as.numeric(opening$bid),1))#
opening <- opening['T09:30/T09:35']#
mean(opening$diff)#
names(data)#
#
#closing difference#
closing <- data.xts['T15:50/T16:05']#
closing$diff <- c(0,diff(as.numeric(closing$bid),1))#
closing <- closing['T16:00/T16:05']#
mean(closing$diff)
library("zoo")#
#library(performanceCharts)#
library("xts")#
valueFile <- "/Volumes/superFly/Users/davidshanabrook/ShinyApps/tos/out/value.csv"#
data <- read.csv(valueFile)#
data.zoo <- read.zoo(valueFile,format="%Y-%m-%d %H:%M:%S", header=T, sep=",")#
data.xts <- as.xts(data.zoo)#
data.zoo$all <- rowSums(data.zoo)#
plot(data.zoo)#
plot.zoo(data.xts)#
#plot.zoo(data$all)#
#chart.TimeSeries(data$roll )
data <- read.csv(valueFile)
data
library("zoo")#
#library(performanceCharts)#
library("xts")#
valueFile <- "/Volumes/superFly/Users/davidshanabrook/ShinyApps/tos/out/value.csv"#
data <- read.csv(valueFile)#
data.zoo <- read.zoo(valueFile,format="%Y-%m-%d %H:%M:%S", header=T, sep=",")#
data.xts <- as.xts(data.zoo)
data.zoo$all <- rowSums(data.zoo)
plot(data.zoo)
#record stock prices#
#library(quantmod)#
#library(ggplot2)#
library("XML2R")#
library("RCurl")#
ticker <- "AAPL"#
quoteFile <- "~/ShinyApps/tos/out/quotes.csv"#
sessionid <- TDALogin("TSLU", "1.0", "dshanabrook", "oklp098")#
url = paste("https://apis.tdameritrade.com/apps/100/Quote;jsessionid=", sessionid,"?source=TSLU&symbol=", ticker, sep="" )#
xmlResult = postForm(url,  style = "post")#
theQuote <-xmlToList(gsub("-", ".", xmlResult)) #
attach(theQuote$quote.list$quote)#
quote.df <- data.frame(time=Sys.time(), ticker=ticker,last=last)#
write.table(quote.df,quoteFile, append=T, sep=",",row.names=F, col.names=F)
library("zoo")#
library("quantmod")#
#library(performanceCharts)#
quotesFile <- "/Volumes/superFly/Users/davidshanabrook/ShinyApps/tos/out/
quotes.csv"
theClasses <- c("zoo", "character", rep("numeric",5))#
data <- read.table(quotesFile, sep=",", header=T)
data.zoo <- read.zoo(valueFile,format="%Y-%m-%d %H:%M:%S", header=T, sep=",")
data.xts <- as.xts(data.zoo)
data.zoo$all <- rowSums(data.zoo)
theClasses <- c("zoo", "character", rep("numeric",5))#
data <- read.table(quotesFile, sep=",", header=T)
quotesFile
quotesFile <- "/Volumes/superFly/Users/davidshanabrook/ShinyApps/tos/out/quotes.csv"
quotesFile
data <- read.table(quotesFile, sep=",", header=T)
data.zoo <- read.zoo(quotesFile,format="%Y-%m-%d %H:%M:%S",FUN = as.POSIXct,#
 header=T, sep=",")
data.xts <- as.xts(data.zoo)#
#
***************************#
#deal with opening.  painful method.  #
opening <- data.xts['T07:50/T09:35']#
opening$diff <- c(0,diff(as.numeric(opening$bid),1))#
opening <- opening['T09:30/T09:35']#
mean(opening$diff)#
names(data)
closing <- data.xts['T15:50/T16:05']#
closing$diff <- c(0,diff(as.numeric(closing$bid),1))#
closing <- closing['T16:00/T16:05']#
mean(closing$diff)
data
library("zoo")#
#library(performanceCharts)#
library("xts")#
valueFile <- "/Volumes/superFly/Users/davidshanabrook/ShinyApps/tos/out/value.csv"#
data <- read.csv(valueFile)#
data.zoo <- read.zoo(valueFile,format="%Y-%m-%d %H:%M:%S", header=T, sep=",")#
data.xts <- as.xts(data.zoo)#
data.zoo$all <- rowSums(data.zoo)#
plot(data.zoo)
data <- read.csv(valueFile)
data.zoo <- read.zoo(valueFile,format="%Y-%m-%d %H:%M:%S", header=T, sep=",")#
data.xts <- as.xts(data.zoo)#
data.zoo$all <- rowSums(data.zoo)#
plot(data.zoo)
library("zoo")#
library("quantmod")#
#library(performanceCharts)#
quotesFile <- "/Volumes/superFly/Users/davidshanabrook/ShinyApps/tos/out/quotes.csv"#
theClasses <- c("zoo", "character", rep("numeric",5))#
data <- read.table(quotesFile, sep=",", header=T)#
data.zoo <- read.zoo(quotesFile,format="%Y-%m-%d %H:%M:%S",FUN = as.POSIXct,#
 header=T, sep=",")
data.xts <- as.xts(data.zoo)#
#
***************************#
#deal with opening.  painful method.  #
opening <- data.xts['T07:50/T09:35']#
opening$diff <- c(0,diff(as.numeric(opening$bid),1))#
opening <- opening['T09:30/T09:35']#
mean(opening$diff)#
names(data)#
#
#closing difference#
closing <- data.xts['T15:50/T16:05']#
closing$diff <- c(0,diff(as.numeric(closing$bid),1))#
closing <- closing['T16:00/T16:05']#
mean(closing$diff)
plot(closing$diff)
barplot(closing$diff)
barplot(opening$diff)
opening$diff
quartz()
barplot(closing$diff)#
barplot(opening$diff)
barplot(closing$diff)
barplot(opening$diff)
barplot(closing$diff)
barplot(closing$diff, title="closing difference")
help(plot)
barplot(closing$diff, main="closing difference")
closing$diff
closing
closing <- data.xts['T15:50/T16:05']
closing
help("main")
barplot(closing$diff, sub="15:59 vs 16:03", )
barplot(closing$diff, subtitle="15:59 vs 16:03", )
barplot(closing$diff, main="15:59 vs 16:03", sub="Positive: higher after close")
barplot(closing$diff, main="15:59 vs 16:03", ylab="Positive: higher after close")
barplot(closing$diff, main="15:59 vs 16:03")
opening <- data.xts['T07:50/T09:35']
opening
#deal with opening.  painful method.  #
opening <- data.xts['T07:50/T09:35']#
opening$diff <- c(0,diff(as.numeric(opening$bid),1))#
opening <- opening['T09:30/T09:35']#
mean(opening$diff)#
names(data)#
#
#closing difference#
closing <- data.xts['T15:50/T16:05']#
closing$diff <- c(0,diff(as.numeric(closing$bid),1))#
closing <- closing['T16:00/T16:05']#
mean(closing$diff)#
#
barplot(closing$diff, main="15:59 vs 16:03", sub="Positive: higher after close")#
barplot(opening$diff, main="08:01 vs 09:30", sub="Positive: higher at open")
mean(opening$diff)
mean(closing$diff)
library("zoo")#
library("quantmod")#
#library(performanceCharts)#
quotesFile <- "/Volumes/superFly/Users/davidshanabrook/ShinyApps/tos/out/quotes.csv"#
theClasses <- c("zoo", "character", rep("numeric",5))#
data <- read.table(quotesFile, sep=",", header=T)#
data.zoo <- read.zoo(quotesFile,format="%Y-%m-%d %H:%M:%S",FUN = as.POSIXct,#
 header=T, sep=",")#
data.xts <- as.xts(data.zoo)#
#
***************************#
#deal with opening.  painful method.  #
opening <- data.xts['T07:50/T09:35']#
opening$diff <- c(0,diff(as.numeric(opening$bid),1))#
opening <- opening['T09:30/T09:35']#
mean(opening$diff)#
names(data)#
#
#closing difference#
closing <- data.xts['T15:50/T16:05']#
closing$diff <- c(0,diff(as.numeric(closing$bid),1))#
closing <- closing['T16:00/T16:05']#
mean(closing$diff)#
#
barplot(closing$diff, main="15:59 vs 16:03", sub="Positive: higher after close")#
abline(h=mean(closing$diff))#
barplot(y, add=T)#
barplot(opening$diff, main="08:01 vs 09:30", sub="Positive: higher at open")#
abline(h=mean(opening$diff))#
barplot(y, add=T)
mean(closing$diff)
abline(h=mean(opening$diff))
mean(opening$diff)
getOptionChainGoogle = function(symbol, Exp="") {#
  library(RCurl)#
  library(jsonlite)#
  library(plyr)#
  fixJSON = function(json){#
    gsub('([^,{:]+):', '"\\1":', json)#
  }#
  URL1 = 'http://www.google.com/finance/option_chain?q=%s&output=json'#
  URL2 = paste0(URL1, '&expy=%d&expm=%d&expd=%d')#
#
  url = sprintf(URL1, symbol)#
  chain = fromJSON(fixJSON(getURL(url)))#
  options = mlply(chain$expirations, function(y, m, d) {#
    url = sprintf(URL2, symbol, y, m, d)#
    expiry = fromJSON(fixJSON(getURL(url)))#
    expiry$calls$type = "Call"#
    expiry$puts$type  = "Put"#
#
    prices = rbind(expiry$calls, expiry$puts)#
    prices$expiry = sprintf("%4d-%02d-%02d", y, m, d)#
    prices$underlying.price = expiry$underlying_price#
    prices$retrieved = Sys.time()#
    prices#
  })#
#
  options = options[sapply(options, class) == "data.frame"]#
  options = cbind(data.frame(symbol), rbind.fill(options))#
  options = rename(options, c(p="premium", b="bid", a="ask", oi="open.interest"))#
  for (col in c("strike", "premium", "bid", "ask"))#
    options[, col] = suppressWarnings(as.numeric(options[, col]))#
  options[, "open.interest"] = suppressWarnings(as.integer(options[, "open.interest"]))#
  col.order = c("symbol", "type", "expiry", "strike", "premium",#
                "bid", "ask", "open.interest", "retrieved")#
  options[, col.order]#
}
getOptionChainGoogle("AAPL")
#https://github.com/joshuaulrich/quantmod/issues/38#
library(RCurl)#
library(jsonlite)#
library(plyr)#
getOptionChainGoogle = function(symbol, Exp="") {#
  if (doDebug) print("getOptionChainGoogle")#
  fixJSON = function(json){#
    gsub('([^,{:]+):', '"\\1":', json)#
  }#
  URL1 = 'http://www.google.com/finance/option_chain?q=%s&output=json'#
  URL2 = paste0(URL1, '&expy=%d&expm=%d&expd=%d')#
#
  url = sprintf(URL1, symbol)#
  chain = fromJSON(fixJSON(getURL(url)))#
  options = mlply(chain$expirations, function(y, m, d) {#
    url = sprintf(URL2, symbol, y, m, d)#
    expiry = fromJSON(fixJSON(getURL(url)))#
    expiry$calls$type = "Call"#
    expiry$puts$type  = "Put"#
#
    prices = rbind(expiry$calls, expiry$puts)#
    prices$expiry = sprintf("%4d-%02d-%02d", y, m, d)#
    prices$underlying.price = expiry$underlying_price#
    prices$retrieved = Sys.time()#
    prices#
  })#
#
  options = options[sapply(options, class) == "data.frame"]#
  options = cbind(data.frame(symbol), rbind.fill(options))#
  options = rename(options, c(p="premium", b="bid", a="ask", oi="open.interest"))#
  for (col in c("strike", "premium", "bid", "ask"))#
    options[, col] = suppressWarnings(as.numeric(options[, col]))#
  options[, "open.interest"] = suppressWarnings(as.integer(options[, "open.interest"]))#
  col.order = c("symbol", "type", "expiry", "strike", "premium",#
                "bid", "ask", "open.interest", "retrieved")#
  options[, col.order]#
}
getOptionChainGoogle("AAPL")
doDebug <<- T
getOptionChainGoogle("AAPL")
#server#
library(shiny)#
#library(quantmod)#
library(ggplot2)#
  library(RCurl)#
  library(jsonlite)#
  library(plyr)
doDebug <<- T
#tester#
#server#
library(shiny)#
#library(quantmod)#
library(ggplot2)#
  library(RCurl)#
  library(jsonlite)#
  library(plyr)#
source("source/googleInput.R")
getwd()
source("./newOI/source/googleInput.R")
if (doDebug) cat("stripGoogleChain")#
	optionMin <- subset(options, select=c(expiry,type,strike,open.interest))#
	puts <- subset(optionMin, type=="Put")#
	calls <- subset(optionMin, type=="Call")#
	putCall <- merge(puts, calls, by=c("expiry","strike"))#
	putCall <- subset(putCall, select=-c(type.x,type.y))#
	names(putCall) <- c("expiry", "strike", "putOI", "callOI")#
	return(putCall)#
}
stripGoogleChain <- function(options) {#
	if (doDebug) cat("stripGoogleChain")#
	optionMin <- subset(options, select=c(expiry,type,strike,open.interest))#
	puts <- subset(optionMin, type=="Put")#
	calls <- subset(optionMin, type=="Call")#
	putCall <- merge(puts, calls, by=c("expiry","strike"))#
	putCall <- subset(putCall, select=-c(type.x,type.y))#
	names(putCall) <- c("expiry", "strike", "putOI", "callOI")#
	return(putCall)#
}#
stripExpirations <- function(chain, exp=NULL){#
	if (doDebug) cat("stripExpirations")#
	if (is.null(exp))#
		exp <- chain[1,]$expiry#
	return(chain[(chain$expiry==exp),])#
}
symbol <- "AAPL"
options <- getOptionChainGoogle(ticker)
options
chains <- stripGoogleChain(options)
chain <- stripExpirations(chains)
chain <- chain[(chain$expiry==expiry),]
chain
minStrike <- reactive(chain[1,]$strike)
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
symbol <- "AAPL"
options <- getOptionChainGoogle(ticker)
value=options[1,]$expiry
value=options[1,]$expiry
options[1,]$expiry
class(value)
newExpiration <- options()[1,]$expiry
options()[1,]$expiry
newExpiration <- options[1,]$expiry
newExpiration
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
googChains <- getOptionChainGoogle(input$ticker)
input$ticker <- "AAPL"
input <- data.frame()
input$ticker <- "AAPL"
stripGoogleChain <- function(googChains) {#
	if (doDebug) print("stripGoogleChain")#
	print(names(googChains))#
	optionMin <- subset(googChains, select=c(expiry,type,strike,open.interest))#
	puts <- subset(optionMin, type=="Put")#
	calls <- subset(optionMin, type=="Call")#
	putCall <- merge(puts, calls, by=c("expiry","strike"))#
	putCall <- subset(putCall, select=-c(type.x,type.y))#
	names(putCall) <- c("expiry", "strike", "putOI", "callOI")#
	return(putCall)#
}
googChains <- getOptionChainGoogle(ticker)
names(googChains)
stripGoogleChains
stripGoogleChain
chains <- stripGoogleChain(options)
chain <- stripExpirations(chains)
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
help(observe)
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
getStrikes <- function(chain){#
	if (doDebug) print("getStrikes")#
	min <- chain[1,]$strike#
	max <- chain[nrow(chain()),]$strike#
	mid <- nrow(chain)/2#
	interval <- chain[mid+1,]$strike - chain[mid,]$strike#
	strike.df <- data.frame(min=min, mid=mid, interval=interval)#
	return(strike.df)#
}
chain
getStrikes(chain)
chain
getStrikes(chain)
getStrikes <- function(chain){#
	if (doDebug) print("getStrikes")#
	min <- chain[1,]$strike#
	max <- chain[nrow(chain),]$strike#
	mid <- nrow(chain)/2#
	interval <- chain[mid+1,]$strike - chain[mid,]$strike#
	strike.df <- data.frame(min=min, mid=mid, interval=interval)#
	return(strike.df)#
}
getStrikes(chain)
getStrikes <- function(chain){#
	if (doDebug) print("getStrikes")#
	min <- chain[1,]$strike#
	max <- chain[nrow(chain),]$strike#
	mid <- nrow(chain)/2#
	interval <- chain[mid+1,]$strike - chain[mid,]$strike#
	strike.df <- data.frame(min=min, max=max, interval=interval)#
	return(strike.df)#
}
getStrikes(chain)
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
9/2
9%%2
help(%%)
help("%%")
9 %/% 2
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
help(pretty)
help(geom_area)
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
#tester#
#server#
library(shiny)#
#library(quantmod)#
library(ggplot2)#
  library(RCurl)#
  library(jsonlite)#
  library(plyr)#
source("./newOI/source/googleInput.R")#
doDebug <<- T#
#
stripGoogleChain <- function(googChains) {#
	if (doDebug) print("stripGoogleChain")#
	print(names(googChains))#
	optionMin <- subset(googChains, select=c(expiry,type,strike,open.interest))#
	puts <- subset(optionMin, type=="Put")#
	calls <- subset(optionMin, type=="Call")#
	putCall <- merge(puts, calls, by=c("expiry","strike"))#
	putCall <- subset(putCall, select=-c(type.x,type.y))#
	names(putCall) <- c("expiry", "strike", "putOI", "callOI")#
	return(putCall)#
}#
stripExpirations <- function(chain, exp=NULL){#
	if (doDebug) cat("stripExpirations")#
	if (is.null(exp))#
		exp <- chain[1,]$expiry#
	return(chain[(chain$expiry==exp),])#
}#
symbol <- "AAPL"#
#shinyServer(function(input, output, session){#
#	observeEvent(update,  {#
	if (doDebug) cat("update")#
	googChains <- getOptionChainGoogle(ticker)#
	 chains <- stripGoogleChain(options)#
chain <- stripExpirations(chains)#
	 chain <- chain[(chain$expiry==expiry),]
googChains
head(googChains)
#tester#
#server#
library(shiny)#
#library(quantmod)#
library(ggplot2)#
  library(RCurl)#
  library(jsonlite)#
  library(plyr)#
source("./newOI/source/googleInput.R")#
doDebug <<- T#
#
stripGoogleChain <- function(googChains) {#
	if (doDebug) print("stripGoogleChain")#
	print(names(googChains))#
	optionMin <- subset(googChains, select=c(expiry,type,strike,open.interest))#
	puts <- subset(optionMin, type=="Put")#
	calls <- subset(optionMin, type=="Call")#
	putCall <- merge(puts, calls, by=c("expiry","strike"))#
	putCall <- subset(putCall, select=-c(type.x,type.y))#
	names(putCall) <- c("expiry", "strike", "putOI", "callOI")#
	return(putCall)#
}#
stripExpirations <- function(chain, exp=NULL){#
	if (doDebug) cat("stripExpirations")#
	if (is.null(exp))#
		exp <- chain[1,]$expiry#
	return(chain[(chain$expiry==exp),])#
}#
symbol <- "AAPL"#
#shinyServer(function(input, output, session){#
#	observeEvent(update,  {#
	if (doDebug) cat("update")#
	googChains <- getOptionChainGoogle(ticker)#
	 chains <- stripGoogleChain(options)#
chain <- stripExpirations(chains)#
	 chain <- chain[(chain$expiry==expiry),]
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("newOI")
